{"version":3,"sources":["redux-store.js","validate.js","fieldsRenderer.js","inputTypes.jsx","countries.js","DemoForm.jsx","App.js","serviceWorker.js","index.js"],"names":["reducers","combineReducers","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","validate","values","errors","firstName","lastName","email","isValidEmail","country","createRenderer","render","input","meta","label","rest","hasError","error","touched","className","active","join","RenderInput","placeholder","renderSelect","children","render小heckbox","type","countries","DemoForm","handleSubmit","submitting","alertData","onSubmit","Field","name","component","map","key","value","disabled","reduxForm","destroyOnUnmount","setTimeout","alert","JSON","stringify","App","props","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4OAIIA,EAAWC,YAAgB,CAC7BC,KAAMC,MAGFC,EAAmBC,OAAOC,sCAAwCC,IAMzDC,EALHC,YACVT,EACAI,EAAiBM,YAAgBC,O,mDCSpBC,EAlBE,SAACC,GAChB,IAAMC,EAAS,GAef,OAdKD,EAAOE,YACVD,EAAOC,UAAY,eAEhBF,EAAOG,WACVF,EAAOE,SAAW,eAEfH,EAAOI,MAEAC,IAAaL,EAAOI,SAC9BH,EAAOG,MAAQ,cAFfH,EAAOG,MAAQ,cAIZJ,EAAOM,UACVL,EAAOK,QAAU,eAEZL,G,QCCMM,EAjBQ,SAACC,GAAD,OAAY,YAAsC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,MAAUC,EAAW,wCAClEC,EAAWH,EAAKI,OAASJ,EAAKK,QAClC,OACE,yBACEC,UAAW,CACT,kBACAH,EAAW,QAAU,GACrBH,EAAKO,OAAS,SAAW,IACzBC,KAAK,MAEP,+BAAQP,GACPH,EAAOC,EAAOE,EAAOC,GACrBC,GAAY,8BAAOH,EAAKI,UCXlBK,EAAcZ,GAAe,SAACE,EAAOE,GAAR,OACxC,2CAAWF,EAAX,CAAkBW,YAAaT,QAEpBU,EAAed,GAAe,SAACE,EAAOE,EAAR,OAAiBW,EAAjB,EAAiBA,SAAjB,OACzC,2BAAYb,EAAQa,MAETC,EAAiBhB,GAAe,SAACE,EAAOE,GAAR,OAC3C,2CAAWF,EAAX,CAAkBe,KAAK,iBCVZC,EAAY,CACvB,MACA,SACA,QACA,UACA,WACA,QACA,UCDEC,EAAW,YAA8C,IAA3CC,EAA0C,EAA1CA,aAAcC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UAC1C,OACE,0BAAMC,SAAUH,EAAaE,GAAYb,UAAU,kBACjD,kBAACe,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWd,EAAaR,MAAM,eACtD,kBAACoB,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWd,EAAaR,MAAM,cACrD,kBAACoB,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWd,EAAaR,MAAM,UAClD,kBAACoB,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWZ,EAAcV,MAAM,WACnD,iCACCc,EAAUS,KAAI,SAAC5B,GAAD,OACb,4BAAQ6B,IAAK7B,EAAS8B,MAAO9B,GAC1BA,OAIP,kBAACyB,EAAA,EAAD,CAAOC,KAAK,aAAaC,UAAWV,EAAgBZ,MAAM,gBAC1D,4BAAQa,KAAK,SAASa,SAAUT,GAAhC,YAYSF,EALfA,EAAWY,YAAU,CACnBjD,KAAM,OACNkD,kBAAkB,EAClBxC,YAHSuC,CAIRZ,GC5BGG,EAAY,SAAC7B,GACjBwC,YAAW,WACTC,MAAM,qBAAD,OAAsBC,KAAKC,UAAU3C,EAAQ,KAAM,OACvD,MAWU4C,MATf,SAAaC,GACX,OACE,6BACE,kEACA,kBAAC,EAAD,CAAUhB,UAAWA,MCDPiB,QACW,cAA7BtD,OAAOuD,SAASC,UAEe,UAA7BxD,OAAOuD,SAASC,UAEhBxD,OAAOuD,SAASC,SAASC,MACvB,2DCVNC,IAAS1C,OACP,kBAAC,IAAM2C,WAAP,KACE,kBAAC,IAAD,CAAUxD,MAAOA,GACf,kBAAC,EAAD,QAGJyD,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACL+C,QAAQ/C,MAAMA,EAAMgD,a","file":"static/js/main.29e9da12.chunk.js","sourcesContent":["import { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n  form: formReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nlet store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nexport default store;\r\n","import isValidEmail from \"sane-email-validation\";\r\n\r\nconst validate = (values) => {\r\n  const errors = {};\r\n  if (!values.firstName) {\r\n    errors.firstName = \"is Required\";\r\n  }\r\n  if (!values.lastName) {\r\n    errors.lastName = \"is Required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"is Required\";\r\n  } else if (!isValidEmail(values.email)) {\r\n    errors.email = \"is Invalid\";\r\n  }\r\n  if (!values.country) {\r\n    errors.country = \"is Required\";\r\n  }\r\n  return errors;\r\n};\r\nexport default validate;\r\n","import React from \"react\";\r\n\r\nconst createRenderer = (render) => ({ input, meta, label, ...rest }) => {\r\n  let hasError = meta.error && meta.touched;\r\n  return (\r\n    <div\r\n      className={[\r\n        \"inputsContainer\",\r\n        hasError ? \"error\" : \"\",\r\n        meta.active ? \"active\" : \"\",\r\n      ].join(\" \")}\r\n    >\r\n      <label>{label}</label>\r\n      {render(input, label, rest)}\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default createRenderer;\r\n","import React from \"react\";\r\nimport createRenderer from \"./fieldsRenderer\";\r\n\r\nexport const RenderInput = createRenderer((input, label) => (\r\n  <input {...input} placeholder={label} />\r\n));\r\nexport const renderSelect = createRenderer((input, label, { children }) => (\r\n  <select {...input}>{children}</select>\r\n));\r\nexport const render小heckbox = createRenderer((input, label) => (\r\n  <input {...input} type=\"checkbox\" />\r\n));\r\n","export const countries = [\r\n  \"USA\",\r\n  \"Russia\",\r\n  \"Spain\",\r\n  \"Armenia\",\r\n  \"Cambodia\",\r\n  \"China\",\r\n  \"Cyprus\",\r\n];\r\n","import React from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport validate from \"./validate\";\r\nimport { RenderInput, renderSelect, render小heckbox } from \"./inputTypes\";\r\nimport { countries } from \"./countries\";\r\n\r\nlet DemoForm = ({ handleSubmit, submitting, alertData }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit(alertData)} className=\"submissionForm\">\r\n      <Field name=\"firstName\" component={RenderInput} label=\"First name\" />\r\n      <Field name=\"lastName\" component={RenderInput} label=\"Last name\" />\r\n      <Field name=\"email\" component={RenderInput} label=\"Email\" />\r\n      <Field name=\"country\" component={renderSelect} label=\"Country\">\r\n        <option />\r\n        {countries.map((country) => (\r\n          <option key={country} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </Field>\r\n      <Field name=\"rememberMe\" component={render小heckbox} label=\"Remember me\" />\r\n      <button type=\"submit\" disabled={submitting}>\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nDemoForm = reduxForm({\r\n  form: \"demo\",\r\n  destroyOnUnmount: false,\r\n  validate,\r\n})(DemoForm);\r\nexport default DemoForm;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport DemoForm from \"./DemoForm\";\n\nconst alertData = (values) => {\n  setTimeout(() => {\n    alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`);\n  }, 1000);\n};\nfunction App(props) {\n  return (\n    <div>\n      <h1>Just an example of form validation</h1>\n      <DemoForm alertData={alertData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux-store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}